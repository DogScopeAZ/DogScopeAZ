# Import the necessary modules
import sys
from PyQt5 import QtWidgets, QtGui
from PyQt5.QtWidgets import QApplication, QMainWindow
from PyQt5.uic import loadUi

# Import the validation script
import pandas as pd

# specify the set of characters that are allowed in the Excel sheet
allowed_chars = set(
    [
        "a",
        "b",
        "c",
        "d",
        "e",
        "f",
        "g",
        "h",
        "i",
        "j",
        "k",
        "l",
        "m",
        "n",
        "o",
        "p",
        "q",
        "r",
        "s",
        "t",
        "u",
        "v",
        "w",
        "x",
        "y",
        "z",
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
    ]
)

# Create a GUI class that inherits from QMainWindow
class MainWindow(QMainWindow):
    def __init__(self):
        super(MainWindow, self).__init__()
        loadUi("main_window.ui", self)

        # Set the default button
        self.openFileButton.setDefault(True)

        # Set the event listeners
        self.openFileButton.clicked.connect(self.selectFile)
        self.startButton.clicked.connect(self.startValidation)

    # Select an Excel file to validate
    def selectFile(self):
        # Open a file dialog to select an Excel file
        file_name = QtWidgets.QFileDialog.getOpenFileName(
            self, "Select Excel file", ".", "Excel files (*.xlsx)"
        )

        # Set the selected file name in the text field
        self.fileNameField.setText(file_name[0])

    # Start the validation process
    def startValidation(self):
        # Read the Excel file into a Pandas dataframe
        file_name = self.fileNameField.text()
        df = pd.read_excel(file_name)

        # Check if the dataframe contains any characters that are not in the allowed set
        # only check columns that are named "zip code"
        self.statusField.setText("Validating zip code column...")
        if not set(df[df.columns.str.lower() == "zip code"].values.flatten()).issubset(
            set(["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"])
        ):
            self.statusField.setText("Invalid character found in zip code column!")
        else:
            self.statusField.setText("All characters in zip code column are valid!")

        # Check if any rows have "Business" = "Yes" and "Business name" is null
        self.statusField.setText("Validating Business name column...")
        if any(
            df[df.columns.str.lower() == "business"].values.flatten() == "yes"
        ) and any(
            pd.isnull(df[df.columns.str.lower() == "business name"].values.flatten())
        ):
            self.statusField.setText("Invalid value found in Business name column!")
        else:
            self.statusField.setText("All values in Business name column are valid!")


# Run the GUI

app = QApplication(sys.argv)
window = MainWindow()
window.show()
sys.exit(app.exec_())

# This script creates a GUI with two buttons: "Open File" and "Start". The "Open File" button opens a file dialog that allows the user to select an Excel file to validate, and the "Start" button starts the validation process. The script also has a text field that displays the progress of the validation process.

# To use this script, you will need to create a GUI layout using a tool like Qt Designer and save it as `main_window.ui`. The layout should have the following components:
# - A push button named "openFileButton" to select the input file
# - A line edit field named "fileNameField" to display the selected file name
# - A push button named "startButton" to start the validation process
# - A line edit field named "statusField" to display the progress of the validation process

# Once you have created the GUI layout, you can run the script to see the GUI in action. You can then modify the validation script to suit your specific needs.

# I hope this helps! Let me know if you have any other questions.
